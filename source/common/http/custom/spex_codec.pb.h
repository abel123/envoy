// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source/common/http/custom/spex_codec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
namespace sp {
namespace common {
class Any;
struct AnyDefaultTypeInternal;
extern AnyDefaultTypeInternal _Any_default_instance_;
class Constant;
struct ConstantDefaultTypeInternal;
extern ConstantDefaultTypeInternal _Constant_default_instance_;
class KV;
struct KVDefaultTypeInternal;
extern KVDefaultTypeInternal _KV_default_instance_;
class KeepAliveRequest;
struct KeepAliveRequestDefaultTypeInternal;
extern KeepAliveRequestDefaultTypeInternal _KeepAliveRequest_default_instance_;
class KeepAliveResponse;
struct KeepAliveResponseDefaultTypeInternal;
extern KeepAliveResponseDefaultTypeInternal _KeepAliveResponse_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class SpexCodec;
struct SpexCodecDefaultTypeInternal;
extern SpexCodecDefaultTypeInternal _SpexCodec_default_instance_;
class SpexHeader;
struct SpexHeaderDefaultTypeInternal;
extern SpexHeaderDefaultTypeInternal _SpexHeader_default_instance_;
class SpexHeaderQoS;
struct SpexHeaderQoSDefaultTypeInternal;
extern SpexHeaderQoSDefaultTypeInternal _SpexHeaderQoS_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace common
}  // namespace sp
PROTOBUF_NAMESPACE_OPEN
template<> ::sp::common::Any* Arena::CreateMaybeMessage<::sp::common::Any>(Arena*);
template<> ::sp::common::Constant* Arena::CreateMaybeMessage<::sp::common::Constant>(Arena*);
template<> ::sp::common::KV* Arena::CreateMaybeMessage<::sp::common::KV>(Arena*);
template<> ::sp::common::KeepAliveRequest* Arena::CreateMaybeMessage<::sp::common::KeepAliveRequest>(Arena*);
template<> ::sp::common::KeepAliveResponse* Arena::CreateMaybeMessage<::sp::common::KeepAliveResponse>(Arena*);
template<> ::sp::common::Metadata* Arena::CreateMaybeMessage<::sp::common::Metadata>(Arena*);
template<> ::sp::common::SpexCodec* Arena::CreateMaybeMessage<::sp::common::SpexCodec>(Arena*);
template<> ::sp::common::SpexHeader* Arena::CreateMaybeMessage<::sp::common::SpexHeader>(Arena*);
template<> ::sp::common::SpexHeaderQoS* Arena::CreateMaybeMessage<::sp::common::SpexHeaderQoS>(Arena*);
template<> ::sp::common::Status* Arena::CreateMaybeMessage<::sp::common::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sp {
namespace common {

enum Constant_ErrorCode : int {
  Constant_ErrorCode_SUCCESS = 0,
  Constant_ErrorCode_ERROR_SP_NOT_INIT = 100,
  Constant_ErrorCode_ERROR_SP_NEED_AUTH = 101,
  Constant_ErrorCode_ERROR_SP_SERVICE_UNAVAILABLE = 102,
  Constant_ErrorCode_ERROR_SP_SERVICE_BUSY = 103,
  Constant_ErrorCode_ERROR_SP_SERVICE_NOT_FOUND = 104,
  Constant_ErrorCode_ERROR_SP_PARAMS = 105,
  Constant_ErrorCode_ERROR_SP_HEADER = 106,
  Constant_ErrorCode_ERROR_SP_TIMEOUT = 107,
  Constant_ErrorCode_ERROR_SP_INSTANCE_DUPLICATED = 108,
  Constant_ErrorCode_ERROR_SP_OVERLOAD = 109,
  Constant_ErrorCode_ERROR_SP_SERVE_PERMISSION = 110,
  Constant_ErrorCode_ERROR_SP_ACCESS_PERMISSION = 111,
  Constant_ErrorCode_ERROR_SP_INTERNAL = 112,
  Constant_ErrorCode_ERROR_SP_SPEX_UNAVAILABLE = 113,
  Constant_ErrorCode_ERROR_SP_BODY = 114,
  Constant_ErrorCode_ERROR_SP_PFB_NOT_FOUND = 115,
  Constant_ErrorCode_ERROR_SP_SUBSET_NOT_FOUND = 116,
  Constant_ErrorCode_ERROR_SP_SPEX_NETWORK = 117,
  Constant_ErrorCode_ERROR_SP_SPCON_SUBSCRIBE = 118,
  Constant_ErrorCode_ERROR_SP_SPROUT_AUTH = 119,
  Constant_ErrorCode_ERROR_SP_SPROUT_REGISTER = 120,
  Constant_ErrorCode_ERROR_SP_SPROUT_NOTIFY = 121,
  Constant_ErrorCode_ERROR_SP_SPROUT_KEEPALIVE = 122,
  Constant_ErrorCode_ERROR_SP_SPROUT_LEASE = 123,
  Constant_ErrorCode_ERROR_SP_EMPTY_ROUTING = 124,
  Constant_ErrorCode_ERROR_SP_RULE_NOT_FOUND = 125,
  Constant_ErrorCode_ERROR_SP_SERIVCE_OFFLINE = 9000,
  Constant_ErrorCode_ERROR_SP_SERIVCE_ERROR = 9001,
  Constant_ErrorCode_ERROR_UNKNOWN = 10000,
  Constant_ErrorCode_ERROR_NOT_INIT = 10001,
  Constant_ErrorCode_ERROR_PARAMS = 10002,
  Constant_ErrorCode_ERROR_PERMISSION = 10003,
  Constant_ErrorCode_ERROR_TIMEOUT = 10004,
  Constant_ErrorCode_ERROR_SYSTEM = 10005,
  Constant_ErrorCode_ERROR_QUOTA_LIMIT = 10006,
  Constant_ErrorCode_ERROR_NOT_IMPLEMENTED = 10007,
  Constant_ErrorCode_ERROR_DEPRECATED = 10008,
  Constant_ErrorCode_ERROR_SERVICE_UNAVAILABLE = 10009,
  Constant_ErrorCode_ERROR_SERVICE_BUSY = 10010,
  Constant_ErrorCode_ERROR_SERVICE_INTERNAL = 10011,
  Constant_ErrorCode_ERROR_NEED_AUTH = 10012,
  Constant_ErrorCode_ERROR_NOT_FOUND = 10013,
  Constant_ErrorCode_ERROR_ENTITY_EXISTED = 10014,
  Constant_ErrorCode_ERROR_EXCEED_LIMIT = 10015,
  Constant_ErrorCode_ERROR_SERVICE_OVERLOAD = 10016,
  Constant_ErrorCode_ERROR_EARLY_REJECTION = 10017,
  Constant_ErrorCode_ERROR_CIRCUIT_BREAKER_TRIPPED = 10018,
  Constant_ErrorCode_ERROR_AEGIS_DROPPED = 10200,
  Constant_ErrorCode_ERROR_BIZ_ERROR = 10300
};
bool Constant_ErrorCode_IsValid(int value);
constexpr Constant_ErrorCode Constant_ErrorCode_ErrorCode_MIN = Constant_ErrorCode_SUCCESS;
constexpr Constant_ErrorCode Constant_ErrorCode_ErrorCode_MAX = Constant_ErrorCode_ERROR_BIZ_ERROR;
constexpr int Constant_ErrorCode_ErrorCode_ARRAYSIZE = Constant_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Constant_ErrorCode_descriptor();
template<typename T>
inline const std::string& Constant_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Constant_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Constant_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Constant_ErrorCode_descriptor(), enum_t_value);
}
inline bool Constant_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Constant_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Constant_ErrorCode>(
    Constant_ErrorCode_descriptor(), name, value);
}
enum Constant_SpexHeaderFlag : int {
  Constant_SpexHeaderFlag_RPC_REQUEST = 0,
  Constant_SpexHeaderFlag_RPC_REPLY = 1
};
bool Constant_SpexHeaderFlag_IsValid(int value);
constexpr Constant_SpexHeaderFlag Constant_SpexHeaderFlag_SpexHeaderFlag_MIN = Constant_SpexHeaderFlag_RPC_REQUEST;
constexpr Constant_SpexHeaderFlag Constant_SpexHeaderFlag_SpexHeaderFlag_MAX = Constant_SpexHeaderFlag_RPC_REPLY;
constexpr int Constant_SpexHeaderFlag_SpexHeaderFlag_ARRAYSIZE = Constant_SpexHeaderFlag_SpexHeaderFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Constant_SpexHeaderFlag_descriptor();
template<typename T>
inline const std::string& Constant_SpexHeaderFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Constant_SpexHeaderFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Constant_SpexHeaderFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Constant_SpexHeaderFlag_descriptor(), enum_t_value);
}
inline bool Constant_SpexHeaderFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Constant_SpexHeaderFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Constant_SpexHeaderFlag>(
    Constant_SpexHeaderFlag_descriptor(), name, value);
}
enum Constant_SpexHeaderFlagBitmask : int {
  Constant_SpexHeaderFlagBitmask_HEADER_BITMASK_RPC_REPLY = 1,
  Constant_SpexHeaderFlagBitmask_HEADER_BITMASK_APPLICATION_HEADER = 2
};
bool Constant_SpexHeaderFlagBitmask_IsValid(int value);
constexpr Constant_SpexHeaderFlagBitmask Constant_SpexHeaderFlagBitmask_SpexHeaderFlagBitmask_MIN = Constant_SpexHeaderFlagBitmask_HEADER_BITMASK_RPC_REPLY;
constexpr Constant_SpexHeaderFlagBitmask Constant_SpexHeaderFlagBitmask_SpexHeaderFlagBitmask_MAX = Constant_SpexHeaderFlagBitmask_HEADER_BITMASK_APPLICATION_HEADER;
constexpr int Constant_SpexHeaderFlagBitmask_SpexHeaderFlagBitmask_ARRAYSIZE = Constant_SpexHeaderFlagBitmask_SpexHeaderFlagBitmask_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Constant_SpexHeaderFlagBitmask_descriptor();
template<typename T>
inline const std::string& Constant_SpexHeaderFlagBitmask_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Constant_SpexHeaderFlagBitmask>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Constant_SpexHeaderFlagBitmask_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Constant_SpexHeaderFlagBitmask_descriptor(), enum_t_value);
}
inline bool Constant_SpexHeaderFlagBitmask_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Constant_SpexHeaderFlagBitmask* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Constant_SpexHeaderFlagBitmask>(
    Constant_SpexHeaderFlagBitmask_descriptor(), name, value);
}
enum Constant_SpexHeaderContentType : int {
  Constant_SpexHeaderContentType_CONTENT_TYPE_PROTOBUF = 0,
  Constant_SpexHeaderContentType_CONTENT_TYPE_JSON = 1,
  Constant_SpexHeaderContentType_CONTENT_TYPE_HTTP = 2,
  Constant_SpexHeaderContentType_CONTENT_TYPE_CUSTOM_START = 65536
};
bool Constant_SpexHeaderContentType_IsValid(int value);
constexpr Constant_SpexHeaderContentType Constant_SpexHeaderContentType_SpexHeaderContentType_MIN = Constant_SpexHeaderContentType_CONTENT_TYPE_PROTOBUF;
constexpr Constant_SpexHeaderContentType Constant_SpexHeaderContentType_SpexHeaderContentType_MAX = Constant_SpexHeaderContentType_CONTENT_TYPE_CUSTOM_START;
constexpr int Constant_SpexHeaderContentType_SpexHeaderContentType_ARRAYSIZE = Constant_SpexHeaderContentType_SpexHeaderContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Constant_SpexHeaderContentType_descriptor();
template<typename T>
inline const std::string& Constant_SpexHeaderContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Constant_SpexHeaderContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Constant_SpexHeaderContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Constant_SpexHeaderContentType_descriptor(), enum_t_value);
}
inline bool Constant_SpexHeaderContentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Constant_SpexHeaderContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Constant_SpexHeaderContentType>(
    Constant_SpexHeaderContentType_descriptor(), name, value);
}
enum InstanceStatus : int {
  UP = 0,
  DOWN = 1,
  FORCED_UP = 2,
  FORCED_DOWN = 3,
  STARTING = 4
};
bool InstanceStatus_IsValid(int value);
constexpr InstanceStatus InstanceStatus_MIN = UP;
constexpr InstanceStatus InstanceStatus_MAX = STARTING;
constexpr int InstanceStatus_ARRAYSIZE = InstanceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstanceStatus_descriptor();
template<typename T>
inline const std::string& InstanceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InstanceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InstanceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InstanceStatus_descriptor(), enum_t_value);
}
inline bool InstanceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InstanceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InstanceStatus>(
    InstanceStatus_descriptor(), name, value);
}
// ===================================================================

class SpexCodec final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:sp.common.SpexCodec) */ {
 public:
  inline SpexCodec() : SpexCodec(nullptr) {}
  explicit constexpr SpexCodec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpexCodec(const SpexCodec& from);
  SpexCodec(SpexCodec&& from) noexcept
    : SpexCodec() {
    *this = ::std::move(from);
  }

  inline SpexCodec& operator=(const SpexCodec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpexCodec& operator=(SpexCodec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpexCodec& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpexCodec* internal_default_instance() {
    return reinterpret_cast<const SpexCodec*>(
               &_SpexCodec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpexCodec& a, SpexCodec& b) {
    a.Swap(&b);
  }
  inline void Swap(SpexCodec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpexCodec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpexCodec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpexCodec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SpexCodec& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SpexCodec& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.SpexCodec";
  }
  protected:
  explicit SpexCodec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sp.common.SpexCodec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class Constant final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:sp.common.Constant) */ {
 public:
  inline Constant() : Constant(nullptr) {}
  explicit constexpr Constant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Constant(const Constant& from);
  Constant(Constant&& from) noexcept
    : Constant() {
    *this = ::std::move(from);
  }

  inline Constant& operator=(const Constant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Constant& operator=(Constant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Constant& default_instance() {
    return *internal_default_instance();
  }
  static inline const Constant* internal_default_instance() {
    return reinterpret_cast<const Constant*>(
               &_Constant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Constant& a, Constant& b) {
    a.Swap(&b);
  }
  inline void Swap(Constant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Constant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Constant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Constant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Constant& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Constant& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.Constant";
  }
  protected:
  explicit Constant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Constant_ErrorCode ErrorCode;
  static constexpr ErrorCode SUCCESS =
    Constant_ErrorCode_SUCCESS;
  static constexpr ErrorCode ERROR_SP_NOT_INIT =
    Constant_ErrorCode_ERROR_SP_NOT_INIT;
  static constexpr ErrorCode ERROR_SP_NEED_AUTH =
    Constant_ErrorCode_ERROR_SP_NEED_AUTH;
  static constexpr ErrorCode ERROR_SP_SERVICE_UNAVAILABLE =
    Constant_ErrorCode_ERROR_SP_SERVICE_UNAVAILABLE;
  static constexpr ErrorCode ERROR_SP_SERVICE_BUSY =
    Constant_ErrorCode_ERROR_SP_SERVICE_BUSY;
  static constexpr ErrorCode ERROR_SP_SERVICE_NOT_FOUND =
    Constant_ErrorCode_ERROR_SP_SERVICE_NOT_FOUND;
  static constexpr ErrorCode ERROR_SP_PARAMS =
    Constant_ErrorCode_ERROR_SP_PARAMS;
  static constexpr ErrorCode ERROR_SP_HEADER =
    Constant_ErrorCode_ERROR_SP_HEADER;
  static constexpr ErrorCode ERROR_SP_TIMEOUT =
    Constant_ErrorCode_ERROR_SP_TIMEOUT;
  static constexpr ErrorCode ERROR_SP_INSTANCE_DUPLICATED =
    Constant_ErrorCode_ERROR_SP_INSTANCE_DUPLICATED;
  static constexpr ErrorCode ERROR_SP_OVERLOAD =
    Constant_ErrorCode_ERROR_SP_OVERLOAD;
  static constexpr ErrorCode ERROR_SP_SERVE_PERMISSION =
    Constant_ErrorCode_ERROR_SP_SERVE_PERMISSION;
  static constexpr ErrorCode ERROR_SP_ACCESS_PERMISSION =
    Constant_ErrorCode_ERROR_SP_ACCESS_PERMISSION;
  static constexpr ErrorCode ERROR_SP_INTERNAL =
    Constant_ErrorCode_ERROR_SP_INTERNAL;
  static constexpr ErrorCode ERROR_SP_SPEX_UNAVAILABLE =
    Constant_ErrorCode_ERROR_SP_SPEX_UNAVAILABLE;
  static constexpr ErrorCode ERROR_SP_BODY =
    Constant_ErrorCode_ERROR_SP_BODY;
  static constexpr ErrorCode ERROR_SP_PFB_NOT_FOUND =
    Constant_ErrorCode_ERROR_SP_PFB_NOT_FOUND;
  static constexpr ErrorCode ERROR_SP_SUBSET_NOT_FOUND =
    Constant_ErrorCode_ERROR_SP_SUBSET_NOT_FOUND;
  static constexpr ErrorCode ERROR_SP_SPEX_NETWORK =
    Constant_ErrorCode_ERROR_SP_SPEX_NETWORK;
  static constexpr ErrorCode ERROR_SP_SPCON_SUBSCRIBE =
    Constant_ErrorCode_ERROR_SP_SPCON_SUBSCRIBE;
  static constexpr ErrorCode ERROR_SP_SPROUT_AUTH =
    Constant_ErrorCode_ERROR_SP_SPROUT_AUTH;
  static constexpr ErrorCode ERROR_SP_SPROUT_REGISTER =
    Constant_ErrorCode_ERROR_SP_SPROUT_REGISTER;
  static constexpr ErrorCode ERROR_SP_SPROUT_NOTIFY =
    Constant_ErrorCode_ERROR_SP_SPROUT_NOTIFY;
  static constexpr ErrorCode ERROR_SP_SPROUT_KEEPALIVE =
    Constant_ErrorCode_ERROR_SP_SPROUT_KEEPALIVE;
  static constexpr ErrorCode ERROR_SP_SPROUT_LEASE =
    Constant_ErrorCode_ERROR_SP_SPROUT_LEASE;
  static constexpr ErrorCode ERROR_SP_EMPTY_ROUTING =
    Constant_ErrorCode_ERROR_SP_EMPTY_ROUTING;
  static constexpr ErrorCode ERROR_SP_RULE_NOT_FOUND =
    Constant_ErrorCode_ERROR_SP_RULE_NOT_FOUND;
  static constexpr ErrorCode ERROR_SP_SERIVCE_OFFLINE =
    Constant_ErrorCode_ERROR_SP_SERIVCE_OFFLINE;
  static constexpr ErrorCode ERROR_SP_SERIVCE_ERROR =
    Constant_ErrorCode_ERROR_SP_SERIVCE_ERROR;
  static constexpr ErrorCode ERROR_UNKNOWN =
    Constant_ErrorCode_ERROR_UNKNOWN;
  static constexpr ErrorCode ERROR_NOT_INIT =
    Constant_ErrorCode_ERROR_NOT_INIT;
  static constexpr ErrorCode ERROR_PARAMS =
    Constant_ErrorCode_ERROR_PARAMS;
  static constexpr ErrorCode ERROR_PERMISSION =
    Constant_ErrorCode_ERROR_PERMISSION;
  static constexpr ErrorCode ERROR_TIMEOUT =
    Constant_ErrorCode_ERROR_TIMEOUT;
  static constexpr ErrorCode ERROR_SYSTEM =
    Constant_ErrorCode_ERROR_SYSTEM;
  static constexpr ErrorCode ERROR_QUOTA_LIMIT =
    Constant_ErrorCode_ERROR_QUOTA_LIMIT;
  static constexpr ErrorCode ERROR_NOT_IMPLEMENTED =
    Constant_ErrorCode_ERROR_NOT_IMPLEMENTED;
  static constexpr ErrorCode ERROR_DEPRECATED =
    Constant_ErrorCode_ERROR_DEPRECATED;
  static constexpr ErrorCode ERROR_SERVICE_UNAVAILABLE =
    Constant_ErrorCode_ERROR_SERVICE_UNAVAILABLE;
  static constexpr ErrorCode ERROR_SERVICE_BUSY =
    Constant_ErrorCode_ERROR_SERVICE_BUSY;
  static constexpr ErrorCode ERROR_SERVICE_INTERNAL =
    Constant_ErrorCode_ERROR_SERVICE_INTERNAL;
  static constexpr ErrorCode ERROR_NEED_AUTH =
    Constant_ErrorCode_ERROR_NEED_AUTH;
  static constexpr ErrorCode ERROR_NOT_FOUND =
    Constant_ErrorCode_ERROR_NOT_FOUND;
  static constexpr ErrorCode ERROR_ENTITY_EXISTED =
    Constant_ErrorCode_ERROR_ENTITY_EXISTED;
  static constexpr ErrorCode ERROR_EXCEED_LIMIT =
    Constant_ErrorCode_ERROR_EXCEED_LIMIT;
  static constexpr ErrorCode ERROR_SERVICE_OVERLOAD =
    Constant_ErrorCode_ERROR_SERVICE_OVERLOAD;
  static constexpr ErrorCode ERROR_EARLY_REJECTION =
    Constant_ErrorCode_ERROR_EARLY_REJECTION;
  static constexpr ErrorCode ERROR_CIRCUIT_BREAKER_TRIPPED =
    Constant_ErrorCode_ERROR_CIRCUIT_BREAKER_TRIPPED;
  static constexpr ErrorCode ERROR_AEGIS_DROPPED =
    Constant_ErrorCode_ERROR_AEGIS_DROPPED;
  static constexpr ErrorCode ERROR_BIZ_ERROR =
    Constant_ErrorCode_ERROR_BIZ_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return Constant_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    Constant_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    Constant_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    Constant_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return Constant_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return Constant_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorCode* value) {
    return Constant_ErrorCode_Parse(name, value);
  }

  typedef Constant_SpexHeaderFlag SpexHeaderFlag;
  static constexpr SpexHeaderFlag RPC_REQUEST =
    Constant_SpexHeaderFlag_RPC_REQUEST;
  static constexpr SpexHeaderFlag RPC_REPLY =
    Constant_SpexHeaderFlag_RPC_REPLY;
  static inline bool SpexHeaderFlag_IsValid(int value) {
    return Constant_SpexHeaderFlag_IsValid(value);
  }
  static constexpr SpexHeaderFlag SpexHeaderFlag_MIN =
    Constant_SpexHeaderFlag_SpexHeaderFlag_MIN;
  static constexpr SpexHeaderFlag SpexHeaderFlag_MAX =
    Constant_SpexHeaderFlag_SpexHeaderFlag_MAX;
  static constexpr int SpexHeaderFlag_ARRAYSIZE =
    Constant_SpexHeaderFlag_SpexHeaderFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpexHeaderFlag_descriptor() {
    return Constant_SpexHeaderFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& SpexHeaderFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpexHeaderFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpexHeaderFlag_Name.");
    return Constant_SpexHeaderFlag_Name(enum_t_value);
  }
  static inline bool SpexHeaderFlag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpexHeaderFlag* value) {
    return Constant_SpexHeaderFlag_Parse(name, value);
  }

  typedef Constant_SpexHeaderFlagBitmask SpexHeaderFlagBitmask;
  static constexpr SpexHeaderFlagBitmask HEADER_BITMASK_RPC_REPLY =
    Constant_SpexHeaderFlagBitmask_HEADER_BITMASK_RPC_REPLY;
  static constexpr SpexHeaderFlagBitmask HEADER_BITMASK_APPLICATION_HEADER =
    Constant_SpexHeaderFlagBitmask_HEADER_BITMASK_APPLICATION_HEADER;
  static inline bool SpexHeaderFlagBitmask_IsValid(int value) {
    return Constant_SpexHeaderFlagBitmask_IsValid(value);
  }
  static constexpr SpexHeaderFlagBitmask SpexHeaderFlagBitmask_MIN =
    Constant_SpexHeaderFlagBitmask_SpexHeaderFlagBitmask_MIN;
  static constexpr SpexHeaderFlagBitmask SpexHeaderFlagBitmask_MAX =
    Constant_SpexHeaderFlagBitmask_SpexHeaderFlagBitmask_MAX;
  static constexpr int SpexHeaderFlagBitmask_ARRAYSIZE =
    Constant_SpexHeaderFlagBitmask_SpexHeaderFlagBitmask_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpexHeaderFlagBitmask_descriptor() {
    return Constant_SpexHeaderFlagBitmask_descriptor();
  }
  template<typename T>
  static inline const std::string& SpexHeaderFlagBitmask_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpexHeaderFlagBitmask>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpexHeaderFlagBitmask_Name.");
    return Constant_SpexHeaderFlagBitmask_Name(enum_t_value);
  }
  static inline bool SpexHeaderFlagBitmask_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpexHeaderFlagBitmask* value) {
    return Constant_SpexHeaderFlagBitmask_Parse(name, value);
  }

  typedef Constant_SpexHeaderContentType SpexHeaderContentType;
  static constexpr SpexHeaderContentType CONTENT_TYPE_PROTOBUF =
    Constant_SpexHeaderContentType_CONTENT_TYPE_PROTOBUF;
  static constexpr SpexHeaderContentType CONTENT_TYPE_JSON =
    Constant_SpexHeaderContentType_CONTENT_TYPE_JSON;
  static constexpr SpexHeaderContentType CONTENT_TYPE_HTTP =
    Constant_SpexHeaderContentType_CONTENT_TYPE_HTTP;
  static constexpr SpexHeaderContentType CONTENT_TYPE_CUSTOM_START =
    Constant_SpexHeaderContentType_CONTENT_TYPE_CUSTOM_START;
  static inline bool SpexHeaderContentType_IsValid(int value) {
    return Constant_SpexHeaderContentType_IsValid(value);
  }
  static constexpr SpexHeaderContentType SpexHeaderContentType_MIN =
    Constant_SpexHeaderContentType_SpexHeaderContentType_MIN;
  static constexpr SpexHeaderContentType SpexHeaderContentType_MAX =
    Constant_SpexHeaderContentType_SpexHeaderContentType_MAX;
  static constexpr int SpexHeaderContentType_ARRAYSIZE =
    Constant_SpexHeaderContentType_SpexHeaderContentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpexHeaderContentType_descriptor() {
    return Constant_SpexHeaderContentType_descriptor();
  }
  template<typename T>
  static inline const std::string& SpexHeaderContentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpexHeaderContentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpexHeaderContentType_Name.");
    return Constant_SpexHeaderContentType_Name(enum_t_value);
  }
  static inline bool SpexHeaderContentType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpexHeaderContentType* value) {
    return Constant_SpexHeaderContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sp.common.Constant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class SpexHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sp.common.SpexHeader) */ {
 public:
  inline SpexHeader() : SpexHeader(nullptr) {}
  ~SpexHeader() override;
  explicit constexpr SpexHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpexHeader(const SpexHeader& from);
  SpexHeader(SpexHeader&& from) noexcept
    : SpexHeader() {
    *this = ::std::move(from);
  }

  inline SpexHeader& operator=(const SpexHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpexHeader& operator=(SpexHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpexHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpexHeader* internal_default_instance() {
    return reinterpret_cast<const SpexHeader*>(
               &_SpexHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpexHeader& a, SpexHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SpexHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpexHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpexHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpexHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpexHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpexHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpexHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.SpexHeader";
  }
  protected:
  explicit SpexHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kKeyFieldNumber = 3,
    kCommandFieldNumber = 4,
    kSourceFieldNumber = 5,
    kDestinationFieldNumber = 10,
    kSpanContextFieldNumber = 12,
    kQosFieldNumber = 9,
    kStatusFieldNumber = 14,
    kFlagFieldNumber = 2,
    kVersionFieldNumber = 7,
    kTimestampFieldNumber = 6,
    kErrorFieldNumber = 8,
    kContentTypeFieldNumber = 11,
    kSessionIdFieldNumber = 13,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string key = 3;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string command = 4;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // optional string source = 5;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string destination = 10;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const std::string& destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // optional string span_context = 12;
  bool has_span_context() const;
  private:
  bool _internal_has_span_context() const;
  public:
  void clear_span_context();
  const std::string& span_context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_span_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_span_context();
  PROTOBUF_NODISCARD std::string* release_span_context();
  void set_allocated_span_context(std::string* span_context);
  private:
  const std::string& _internal_span_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_context(const std::string& value);
  std::string* _internal_mutable_span_context();
  public:

  // optional .sp.common.SpexHeaderQoS qos = 9;
  bool has_qos() const;
  private:
  bool _internal_has_qos() const;
  public:
  void clear_qos();
  const ::sp::common::SpexHeaderQoS& qos() const;
  PROTOBUF_NODISCARD ::sp::common::SpexHeaderQoS* release_qos();
  ::sp::common::SpexHeaderQoS* mutable_qos();
  void set_allocated_qos(::sp::common::SpexHeaderQoS* qos);
  private:
  const ::sp::common::SpexHeaderQoS& _internal_qos() const;
  ::sp::common::SpexHeaderQoS* _internal_mutable_qos();
  public:
  void unsafe_arena_set_allocated_qos(
      ::sp::common::SpexHeaderQoS* qos);
  ::sp::common::SpexHeaderQoS* unsafe_arena_release_qos();

  // optional .sp.common.Status status = 14;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::sp::common::Status& status() const;
  PROTOBUF_NODISCARD ::sp::common::Status* release_status();
  ::sp::common::Status* mutable_status();
  void set_allocated_status(::sp::common::Status* status);
  private:
  const ::sp::common::Status& _internal_status() const;
  ::sp::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::sp::common::Status* status);
  ::sp::common::Status* unsafe_arena_release_status();

  // optional uint32 flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // optional uint32 version = 7;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional uint64 timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional uint32 error = 8;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  uint32_t error() const;
  void set_error(uint32_t value);
  private:
  uint32_t _internal_error() const;
  void _internal_set_error(uint32_t value);
  public:

  // optional uint32 content_type = 11;
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  uint32_t content_type() const;
  void set_content_type(uint32_t value);
  private:
  uint32_t _internal_content_type() const;
  void _internal_set_content_type(uint32_t value);
  public:

  // optional int64 session_id = 13;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  int64_t session_id() const;
  void set_session_id(int64_t value);
  private:
  int64_t _internal_session_id() const;
  void _internal_set_session_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sp.common.SpexHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_context_;
  ::sp::common::SpexHeaderQoS* qos_;
  ::sp::common::Status* status_;
  uint32_t flag_;
  uint32_t version_;
  uint64_t timestamp_;
  uint32_t error_;
  uint32_t content_type_;
  int64_t session_id_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class SpexHeaderQoS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sp.common.SpexHeaderQoS) */ {
 public:
  inline SpexHeaderQoS() : SpexHeaderQoS(nullptr) {}
  ~SpexHeaderQoS() override;
  explicit constexpr SpexHeaderQoS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpexHeaderQoS(const SpexHeaderQoS& from);
  SpexHeaderQoS(SpexHeaderQoS&& from) noexcept
    : SpexHeaderQoS() {
    *this = ::std::move(from);
  }

  inline SpexHeaderQoS& operator=(const SpexHeaderQoS& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpexHeaderQoS& operator=(SpexHeaderQoS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpexHeaderQoS& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpexHeaderQoS* internal_default_instance() {
    return reinterpret_cast<const SpexHeaderQoS*>(
               &_SpexHeaderQoS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SpexHeaderQoS& a, SpexHeaderQoS& b) {
    a.Swap(&b);
  }
  inline void Swap(SpexHeaderQoS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpexHeaderQoS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpexHeaderQoS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpexHeaderQoS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpexHeaderQoS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpexHeaderQoS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpexHeaderQoS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.SpexHeaderQoS";
  }
  protected:
  explicit SpexHeaderQoS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // optional uint32 priority = 1;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // optional uint32 timeout = 2;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  uint32_t timeout() const;
  void set_timeout(uint32_t value);
  private:
  uint32_t _internal_timeout() const;
  void _internal_set_timeout(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sp.common.SpexHeaderQoS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t priority_;
  uint32_t timeout_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class Any final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sp.common.Any) */ {
 public:
  inline Any() : Any(nullptr) {}
  ~Any() override;
  explicit constexpr Any(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Any(const Any& from);
  Any(Any&& from) noexcept
    : Any() {
    *this = ::std::move(from);
  }

  inline Any& operator=(const Any& from) {
    CopyFrom(from);
    return *this;
  }
  inline Any& operator=(Any&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Any& default_instance() {
    return *internal_default_instance();
  }
  static inline const Any* internal_default_instance() {
    return reinterpret_cast<const Any*>(
               &_Any_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Any& a, Any& b) {
    a.Swap(&b);
  }
  inline void Swap(Any* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Any* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Any* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Any>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Any& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Any& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Any* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.Any";
  }
  protected:
  explicit Any(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeUrlFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string type_url = 1;
  bool has_type_url() const;
  private:
  bool _internal_has_type_url() const;
  public:
  void clear_type_url();
  const std::string& type_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_url();
  PROTOBUF_NODISCARD std::string* release_type_url();
  void set_allocated_type_url(std::string* type_url);
  private:
  const std::string& _internal_type_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_url(const std::string& value);
  std::string* _internal_mutable_type_url();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sp.common.Any)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sp.common.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .sp.common.Any details = 3;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::sp::common::Any* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::Any >*
      mutable_details();
  private:
  const ::sp::common::Any& _internal_details(int index) const;
  ::sp::common::Any* _internal_add_details();
  public:
  const ::sp::common::Any& details(int index) const;
  ::sp::common::Any* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::Any >&
      details() const;

  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sp.common.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::Any > details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  uint32_t code_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class KeepAliveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sp.common.KeepAliveRequest) */ {
 public:
  inline KeepAliveRequest() : KeepAliveRequest(nullptr) {}
  ~KeepAliveRequest() override;
  explicit constexpr KeepAliveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAliveRequest(const KeepAliveRequest& from);
  KeepAliveRequest(KeepAliveRequest&& from) noexcept
    : KeepAliveRequest() {
    *this = ::std::move(from);
  }

  inline KeepAliveRequest& operator=(const KeepAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveRequest& operator=(KeepAliveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveRequest* internal_default_instance() {
    return reinterpret_cast<const KeepAliveRequest*>(
               &_KeepAliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KeepAliveRequest& a, KeepAliveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAliveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAliveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeepAliveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeepAliveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAliveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.KeepAliveRequest";
  }
  protected:
  explicit KeepAliveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueFieldNumber = 1,
    kExtraDataFieldNumber = 3,
    kHealthStatusFieldNumber = 2,
  };
  // optional string opaque = 1;
  bool has_opaque() const;
  private:
  bool _internal_has_opaque() const;
  public:
  void clear_opaque();
  const std::string& opaque() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opaque(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opaque();
  PROTOBUF_NODISCARD std::string* release_opaque();
  void set_allocated_opaque(std::string* opaque);
  private:
  const std::string& _internal_opaque() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opaque(const std::string& value);
  std::string* _internal_mutable_opaque();
  public:

  // optional bytes extra_data = 3;
  bool has_extra_data() const;
  private:
  bool _internal_has_extra_data() const;
  public:
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_NODISCARD std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // optional uint32 health_status = 2;
  bool has_health_status() const;
  private:
  bool _internal_has_health_status() const;
  public:
  void clear_health_status();
  uint32_t health_status() const;
  void set_health_status(uint32_t value);
  private:
  uint32_t _internal_health_status() const;
  void _internal_set_health_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sp.common.KeepAliveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  uint32_t health_status_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class KeepAliveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:sp.common.KeepAliveResponse) */ {
 public:
  inline KeepAliveResponse() : KeepAliveResponse(nullptr) {}
  explicit constexpr KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAliveResponse(const KeepAliveResponse& from);
  KeepAliveResponse(KeepAliveResponse&& from) noexcept
    : KeepAliveResponse() {
    *this = ::std::move(from);
  }

  inline KeepAliveResponse& operator=(const KeepAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveResponse& operator=(KeepAliveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveResponse* internal_default_instance() {
    return reinterpret_cast<const KeepAliveResponse*>(
               &_KeepAliveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KeepAliveResponse& a, KeepAliveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAliveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAliveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KeepAliveResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KeepAliveResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.KeepAliveResponse";
  }
  protected:
  explicit KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sp.common.KeepAliveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class KV final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sp.common.KV) */ {
 public:
  inline KV() : KV(nullptr) {}
  ~KV() override;
  explicit constexpr KV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KV(const KV& from);
  KV(KV&& from) noexcept
    : KV() {
    *this = ::std::move(from);
  }

  inline KV& operator=(const KV& from) {
    CopyFrom(from);
    return *this;
  }
  inline KV& operator=(KV&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KV& default_instance() {
    return *internal_default_instance();
  }
  static inline const KV* internal_default_instance() {
    return reinterpret_cast<const KV*>(
               &_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KV& a, KV& b) {
    a.Swap(&b);
  }
  inline void Swap(KV* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KV>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KV& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KV& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KV* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.KV";
  }
  protected:
  explicit KV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sp.common.KV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sp.common.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit constexpr Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sp.common.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 1,
  };
  // repeated .sp.common.KV kvs = 1;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::sp::common::KV* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::KV >*
      mutable_kvs();
  private:
  const ::sp::common::KV& _internal_kvs(int index) const;
  ::sp::common::KV* _internal_add_kvs();
  public:
  const ::sp::common::KV& kvs(int index) const;
  ::sp::common::KV* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::KV >&
      kvs() const;

  // @@protoc_insertion_point(class_scope:sp.common.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::KV > kvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpexCodec

// -------------------------------------------------------------------

// Constant

// -------------------------------------------------------------------

// SpexHeader

// optional bytes id = 1;
inline bool SpexHeader::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpexHeader::has_id() const {
  return _internal_has_id();
}
inline void SpexHeader::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpexHeader::id() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpexHeader::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.id)
}
inline std::string* SpexHeader::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sp.common.SpexHeader.id)
  return _s;
}
inline const std::string& SpexHeader::_internal_id() const {
  return id_.Get();
}
inline void SpexHeader::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpexHeader::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpexHeader::release_id() {
  // @@protoc_insertion_point(field_release:sp.common.SpexHeader.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpexHeader::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.SpexHeader.id)
}

// optional uint32 flag = 2;
inline bool SpexHeader::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SpexHeader::has_flag() const {
  return _internal_has_flag();
}
inline void SpexHeader::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t SpexHeader::_internal_flag() const {
  return flag_;
}
inline uint32_t SpexHeader::flag() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.flag)
  return _internal_flag();
}
inline void SpexHeader::_internal_set_flag(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  flag_ = value;
}
inline void SpexHeader::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.flag)
}

// optional string key = 3;
inline bool SpexHeader::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpexHeader::has_key() const {
  return _internal_has_key();
}
inline void SpexHeader::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpexHeader::key() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpexHeader::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.key)
}
inline std::string* SpexHeader::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:sp.common.SpexHeader.key)
  return _s;
}
inline const std::string& SpexHeader::_internal_key() const {
  return key_.Get();
}
inline void SpexHeader::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpexHeader::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpexHeader::release_key() {
  // @@protoc_insertion_point(field_release:sp.common.SpexHeader.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpexHeader::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.SpexHeader.key)
}

// optional string command = 4;
inline bool SpexHeader::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpexHeader::has_command() const {
  return _internal_has_command();
}
inline void SpexHeader::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SpexHeader::command() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpexHeader::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.command)
}
inline std::string* SpexHeader::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:sp.common.SpexHeader.command)
  return _s;
}
inline const std::string& SpexHeader::_internal_command() const {
  return command_.Get();
}
inline void SpexHeader::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpexHeader::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000004u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpexHeader::release_command() {
  // @@protoc_insertion_point(field_release:sp.common.SpexHeader.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpexHeader::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.SpexHeader.command)
}

// optional string source = 5;
inline bool SpexHeader::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpexHeader::has_source() const {
  return _internal_has_source();
}
inline void SpexHeader::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SpexHeader::source() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpexHeader::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.source)
}
inline std::string* SpexHeader::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:sp.common.SpexHeader.source)
  return _s;
}
inline const std::string& SpexHeader::_internal_source() const {
  return source_.Get();
}
inline void SpexHeader::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpexHeader::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000008u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpexHeader::release_source() {
  // @@protoc_insertion_point(field_release:sp.common.SpexHeader.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpexHeader::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.SpexHeader.source)
}

// optional uint64 timestamp = 6;
inline bool SpexHeader::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SpexHeader::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void SpexHeader::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t SpexHeader::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t SpexHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.timestamp)
  return _internal_timestamp();
}
inline void SpexHeader::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  timestamp_ = value;
}
inline void SpexHeader::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.timestamp)
}

// optional uint32 version = 7;
inline bool SpexHeader::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SpexHeader::has_version() const {
  return _internal_has_version();
}
inline void SpexHeader::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t SpexHeader::_internal_version() const {
  return version_;
}
inline uint32_t SpexHeader::version() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.version)
  return _internal_version();
}
inline void SpexHeader::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  version_ = value;
}
inline void SpexHeader::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.version)
}

// optional uint32 error = 8;
inline bool SpexHeader::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SpexHeader::has_error() const {
  return _internal_has_error();
}
inline void SpexHeader::clear_error() {
  error_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t SpexHeader::_internal_error() const {
  return error_;
}
inline uint32_t SpexHeader::error() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.error)
  return _internal_error();
}
inline void SpexHeader::_internal_set_error(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  error_ = value;
}
inline void SpexHeader::set_error(uint32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.error)
}

// optional .sp.common.SpexHeaderQoS qos = 9;
inline bool SpexHeader::_internal_has_qos() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || qos_ != nullptr);
  return value;
}
inline bool SpexHeader::has_qos() const {
  return _internal_has_qos();
}
inline void SpexHeader::clear_qos() {
  if (qos_ != nullptr) qos_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::sp::common::SpexHeaderQoS& SpexHeader::_internal_qos() const {
  const ::sp::common::SpexHeaderQoS* p = qos_;
  return p != nullptr ? *p : reinterpret_cast<const ::sp::common::SpexHeaderQoS&>(
      ::sp::common::_SpexHeaderQoS_default_instance_);
}
inline const ::sp::common::SpexHeaderQoS& SpexHeader::qos() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.qos)
  return _internal_qos();
}
inline void SpexHeader::unsafe_arena_set_allocated_qos(
    ::sp::common::SpexHeaderQoS* qos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_);
  }
  qos_ = qos;
  if (qos) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sp.common.SpexHeader.qos)
}
inline ::sp::common::SpexHeaderQoS* SpexHeader::release_qos() {
  _has_bits_[0] &= ~0x00000040u;
  ::sp::common::SpexHeaderQoS* temp = qos_;
  qos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sp::common::SpexHeaderQoS* SpexHeader::unsafe_arena_release_qos() {
  // @@protoc_insertion_point(field_release:sp.common.SpexHeader.qos)
  _has_bits_[0] &= ~0x00000040u;
  ::sp::common::SpexHeaderQoS* temp = qos_;
  qos_ = nullptr;
  return temp;
}
inline ::sp::common::SpexHeaderQoS* SpexHeader::_internal_mutable_qos() {
  _has_bits_[0] |= 0x00000040u;
  if (qos_ == nullptr) {
    auto* p = CreateMaybeMessage<::sp::common::SpexHeaderQoS>(GetArenaForAllocation());
    qos_ = p;
  }
  return qos_;
}
inline ::sp::common::SpexHeaderQoS* SpexHeader::mutable_qos() {
  ::sp::common::SpexHeaderQoS* _msg = _internal_mutable_qos();
  // @@protoc_insertion_point(field_mutable:sp.common.SpexHeader.qos)
  return _msg;
}
inline void SpexHeader::set_allocated_qos(::sp::common::SpexHeaderQoS* qos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete qos_;
  }
  if (qos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sp::common::SpexHeaderQoS>::GetOwningArena(qos);
    if (message_arena != submessage_arena) {
      qos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  qos_ = qos;
  // @@protoc_insertion_point(field_set_allocated:sp.common.SpexHeader.qos)
}

// optional string destination = 10;
inline bool SpexHeader::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpexHeader::has_destination() const {
  return _internal_has_destination();
}
inline void SpexHeader::clear_destination() {
  destination_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SpexHeader::destination() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.destination)
  return _internal_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpexHeader::set_destination(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.destination)
}
inline std::string* SpexHeader::mutable_destination() {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:sp.common.SpexHeader.destination)
  return _s;
}
inline const std::string& SpexHeader::_internal_destination() const {
  return destination_.Get();
}
inline void SpexHeader::_internal_set_destination(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpexHeader::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000010u;
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpexHeader::release_destination() {
  // @@protoc_insertion_point(field_release:sp.common.SpexHeader.destination)
  if (!_internal_has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = destination_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (destination_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpexHeader::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (destination_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.SpexHeader.destination)
}

// optional uint32 content_type = 11;
inline bool SpexHeader::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SpexHeader::has_content_type() const {
  return _internal_has_content_type();
}
inline void SpexHeader::clear_content_type() {
  content_type_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t SpexHeader::_internal_content_type() const {
  return content_type_;
}
inline uint32_t SpexHeader::content_type() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.content_type)
  return _internal_content_type();
}
inline void SpexHeader::_internal_set_content_type(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  content_type_ = value;
}
inline void SpexHeader::set_content_type(uint32_t value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.content_type)
}

// optional string span_context = 12;
inline bool SpexHeader::_internal_has_span_context() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SpexHeader::has_span_context() const {
  return _internal_has_span_context();
}
inline void SpexHeader::clear_span_context() {
  span_context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SpexHeader::span_context() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.span_context)
  return _internal_span_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpexHeader::set_span_context(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 span_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.span_context)
}
inline std::string* SpexHeader::mutable_span_context() {
  std::string* _s = _internal_mutable_span_context();
  // @@protoc_insertion_point(field_mutable:sp.common.SpexHeader.span_context)
  return _s;
}
inline const std::string& SpexHeader::_internal_span_context() const {
  return span_context_.Get();
}
inline void SpexHeader::_internal_set_span_context(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  span_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpexHeader::_internal_mutable_span_context() {
  _has_bits_[0] |= 0x00000020u;
  return span_context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpexHeader::release_span_context() {
  // @@protoc_insertion_point(field_release:sp.common.SpexHeader.span_context)
  if (!_internal_has_span_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = span_context_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (span_context_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    span_context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpexHeader::set_allocated_span_context(std::string* span_context) {
  if (span_context != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  span_context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_context,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (span_context_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    span_context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.SpexHeader.span_context)
}

// optional int64 session_id = 13;
inline bool SpexHeader::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SpexHeader::has_session_id() const {
  return _internal_has_session_id();
}
inline void SpexHeader::clear_session_id() {
  session_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00002000u;
}
inline int64_t SpexHeader::_internal_session_id() const {
  return session_id_;
}
inline int64_t SpexHeader::session_id() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.session_id)
  return _internal_session_id();
}
inline void SpexHeader::_internal_set_session_id(int64_t value) {
  _has_bits_[0] |= 0x00002000u;
  session_id_ = value;
}
inline void SpexHeader::set_session_id(int64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:sp.common.SpexHeader.session_id)
}

// optional .sp.common.Status status = 14;
inline bool SpexHeader::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool SpexHeader::has_status() const {
  return _internal_has_status();
}
inline void SpexHeader::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::sp::common::Status& SpexHeader::_internal_status() const {
  const ::sp::common::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::sp::common::Status&>(
      ::sp::common::_Status_default_instance_);
}
inline const ::sp::common::Status& SpexHeader::status() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeader.status)
  return _internal_status();
}
inline void SpexHeader::unsafe_arena_set_allocated_status(
    ::sp::common::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sp.common.SpexHeader.status)
}
inline ::sp::common::Status* SpexHeader::release_status() {
  _has_bits_[0] &= ~0x00000080u;
  ::sp::common::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sp::common::Status* SpexHeader::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:sp.common.SpexHeader.status)
  _has_bits_[0] &= ~0x00000080u;
  ::sp::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::sp::common::Status* SpexHeader::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000080u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::sp::common::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::sp::common::Status* SpexHeader::mutable_status() {
  ::sp::common::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:sp.common.SpexHeader.status)
  return _msg;
}
inline void SpexHeader::set_allocated_status(::sp::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sp::common::Status>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:sp.common.SpexHeader.status)
}

// -------------------------------------------------------------------

// SpexHeaderQoS

// optional uint32 priority = 1;
inline bool SpexHeaderQoS::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpexHeaderQoS::has_priority() const {
  return _internal_has_priority();
}
inline void SpexHeaderQoS::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SpexHeaderQoS::_internal_priority() const {
  return priority_;
}
inline uint32_t SpexHeaderQoS::priority() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeaderQoS.priority)
  return _internal_priority();
}
inline void SpexHeaderQoS::_internal_set_priority(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  priority_ = value;
}
inline void SpexHeaderQoS::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:sp.common.SpexHeaderQoS.priority)
}

// optional uint32 timeout = 2;
inline bool SpexHeaderQoS::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpexHeaderQoS::has_timeout() const {
  return _internal_has_timeout();
}
inline void SpexHeaderQoS::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SpexHeaderQoS::_internal_timeout() const {
  return timeout_;
}
inline uint32_t SpexHeaderQoS::timeout() const {
  // @@protoc_insertion_point(field_get:sp.common.SpexHeaderQoS.timeout)
  return _internal_timeout();
}
inline void SpexHeaderQoS::_internal_set_timeout(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_ = value;
}
inline void SpexHeaderQoS::set_timeout(uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:sp.common.SpexHeaderQoS.timeout)
}

// -------------------------------------------------------------------

// Any

// optional string type_url = 1;
inline bool Any::_internal_has_type_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Any::has_type_url() const {
  return _internal_has_type_url();
}
inline void Any::clear_type_url() {
  type_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Any::type_url() const {
  // @@protoc_insertion_point(field_get:sp.common.Any.type_url)
  return _internal_type_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Any::set_type_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.Any.type_url)
}
inline std::string* Any::mutable_type_url() {
  std::string* _s = _internal_mutable_type_url();
  // @@protoc_insertion_point(field_mutable:sp.common.Any.type_url)
  return _s;
}
inline const std::string& Any::_internal_type_url() const {
  return type_url_.Get();
}
inline void Any::_internal_set_type_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Any::_internal_mutable_type_url() {
  _has_bits_[0] |= 0x00000001u;
  return type_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Any::release_type_url() {
  // @@protoc_insertion_point(field_release:sp.common.Any.type_url)
  if (!_internal_has_type_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = type_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Any::set_allocated_type_url(std::string* type_url) {
  if (type_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.Any.type_url)
}

// optional bytes value = 2;
inline bool Any::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Any::has_value() const {
  return _internal_has_value();
}
inline void Any::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Any::value() const {
  // @@protoc_insertion_point(field_get:sp.common.Any.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Any::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.Any.value)
}
inline std::string* Any::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sp.common.Any.value)
  return _s;
}
inline const std::string& Any::_internal_value() const {
  return value_.Get();
}
inline void Any::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Any::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Any::release_value() {
  // @@protoc_insertion_point(field_release:sp.common.Any.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Any::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.Any.value)
}

// -------------------------------------------------------------------

// Status

// optional uint32 code = 1;
inline bool Status::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Status::has_code() const {
  return _internal_has_code();
}
inline void Status::clear_code() {
  code_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Status::_internal_code() const {
  return code_;
}
inline uint32_t Status::code() const {
  // @@protoc_insertion_point(field_get:sp.common.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void Status::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:sp.common.Status.code)
}

// optional string message = 2;
inline bool Status::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status::has_message() const {
  return _internal_has_message();
}
inline void Status::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:sp.common.Status.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.Status.message)
}
inline std::string* Status::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sp.common.Status.message)
  return _s;
}
inline const std::string& Status::_internal_message() const {
  return message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:sp.common.Status.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Status::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.Status.message)
}

// repeated .sp.common.Any details = 3;
inline int Status::_internal_details_size() const {
  return details_.size();
}
inline int Status::details_size() const {
  return _internal_details_size();
}
inline void Status::clear_details() {
  details_.Clear();
}
inline ::sp::common::Any* Status::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:sp.common.Status.details)
  return details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::Any >*
Status::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:sp.common.Status.details)
  return &details_;
}
inline const ::sp::common::Any& Status::_internal_details(int index) const {
  return details_.Get(index);
}
inline const ::sp::common::Any& Status::details(int index) const {
  // @@protoc_insertion_point(field_get:sp.common.Status.details)
  return _internal_details(index);
}
inline ::sp::common::Any* Status::_internal_add_details() {
  return details_.Add();
}
inline ::sp::common::Any* Status::add_details() {
  ::sp::common::Any* _add = _internal_add_details();
  // @@protoc_insertion_point(field_add:sp.common.Status.details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::Any >&
Status::details() const {
  // @@protoc_insertion_point(field_list:sp.common.Status.details)
  return details_;
}

// -------------------------------------------------------------------

// KeepAliveRequest

// optional string opaque = 1;
inline bool KeepAliveRequest::_internal_has_opaque() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeepAliveRequest::has_opaque() const {
  return _internal_has_opaque();
}
inline void KeepAliveRequest::clear_opaque() {
  opaque_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeepAliveRequest::opaque() const {
  // @@protoc_insertion_point(field_get:sp.common.KeepAliveRequest.opaque)
  return _internal_opaque();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeepAliveRequest::set_opaque(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 opaque_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.KeepAliveRequest.opaque)
}
inline std::string* KeepAliveRequest::mutable_opaque() {
  std::string* _s = _internal_mutable_opaque();
  // @@protoc_insertion_point(field_mutable:sp.common.KeepAliveRequest.opaque)
  return _s;
}
inline const std::string& KeepAliveRequest::_internal_opaque() const {
  return opaque_.Get();
}
inline void KeepAliveRequest::_internal_set_opaque(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opaque_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeepAliveRequest::_internal_mutable_opaque() {
  _has_bits_[0] |= 0x00000001u;
  return opaque_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeepAliveRequest::release_opaque() {
  // @@protoc_insertion_point(field_release:sp.common.KeepAliveRequest.opaque)
  if (!_internal_has_opaque()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = opaque_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opaque_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KeepAliveRequest::set_allocated_opaque(std::string* opaque) {
  if (opaque != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opaque_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaque,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opaque_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    opaque_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.KeepAliveRequest.opaque)
}

// optional uint32 health_status = 2;
inline bool KeepAliveRequest::_internal_has_health_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KeepAliveRequest::has_health_status() const {
  return _internal_has_health_status();
}
inline void KeepAliveRequest::clear_health_status() {
  health_status_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t KeepAliveRequest::_internal_health_status() const {
  return health_status_;
}
inline uint32_t KeepAliveRequest::health_status() const {
  // @@protoc_insertion_point(field_get:sp.common.KeepAliveRequest.health_status)
  return _internal_health_status();
}
inline void KeepAliveRequest::_internal_set_health_status(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  health_status_ = value;
}
inline void KeepAliveRequest::set_health_status(uint32_t value) {
  _internal_set_health_status(value);
  // @@protoc_insertion_point(field_set:sp.common.KeepAliveRequest.health_status)
}

// optional bytes extra_data = 3;
inline bool KeepAliveRequest::_internal_has_extra_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeepAliveRequest::has_extra_data() const {
  return _internal_has_extra_data();
}
inline void KeepAliveRequest::clear_extra_data() {
  extra_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeepAliveRequest::extra_data() const {
  // @@protoc_insertion_point(field_get:sp.common.KeepAliveRequest.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeepAliveRequest::set_extra_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.KeepAliveRequest.extra_data)
}
inline std::string* KeepAliveRequest::mutable_extra_data() {
  std::string* _s = _internal_mutable_extra_data();
  // @@protoc_insertion_point(field_mutable:sp.common.KeepAliveRequest.extra_data)
  return _s;
}
inline const std::string& KeepAliveRequest::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void KeepAliveRequest::_internal_set_extra_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeepAliveRequest::_internal_mutable_extra_data() {
  _has_bits_[0] |= 0x00000002u;
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeepAliveRequest::release_extra_data() {
  // @@protoc_insertion_point(field_release:sp.common.KeepAliveRequest.extra_data)
  if (!_internal_has_extra_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = extra_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extra_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    extra_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KeepAliveRequest::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extra_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    extra_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.KeepAliveRequest.extra_data)
}

// -------------------------------------------------------------------

// KeepAliveResponse

// -------------------------------------------------------------------

// KV

// optional string key = 1;
inline bool KV::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KV::has_key() const {
  return _internal_has_key();
}
inline void KV::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KV::key() const {
  // @@protoc_insertion_point(field_get:sp.common.KV.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KV::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.KV.key)
}
inline std::string* KV::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:sp.common.KV.key)
  return _s;
}
inline const std::string& KV::_internal_key() const {
  return key_.Get();
}
inline void KV::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KV::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KV::release_key() {
  // @@protoc_insertion_point(field_release:sp.common.KV.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KV::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.KV.key)
}

// optional string value = 2;
inline bool KV::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KV::has_value() const {
  return _internal_has_value();
}
inline void KV::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KV::value() const {
  // @@protoc_insertion_point(field_get:sp.common.KV.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KV::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sp.common.KV.value)
}
inline std::string* KV::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sp.common.KV.value)
  return _s;
}
inline const std::string& KV::_internal_value() const {
  return value_.Get();
}
inline void KV::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KV::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KV::release_value() {
  // @@protoc_insertion_point(field_release:sp.common.KV.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KV::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sp.common.KV.value)
}

// -------------------------------------------------------------------

// Metadata

// repeated .sp.common.KV kvs = 1;
inline int Metadata::_internal_kvs_size() const {
  return kvs_.size();
}
inline int Metadata::kvs_size() const {
  return _internal_kvs_size();
}
inline void Metadata::clear_kvs() {
  kvs_.Clear();
}
inline ::sp::common::KV* Metadata::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:sp.common.Metadata.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::KV >*
Metadata::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:sp.common.Metadata.kvs)
  return &kvs_;
}
inline const ::sp::common::KV& Metadata::_internal_kvs(int index) const {
  return kvs_.Get(index);
}
inline const ::sp::common::KV& Metadata::kvs(int index) const {
  // @@protoc_insertion_point(field_get:sp.common.Metadata.kvs)
  return _internal_kvs(index);
}
inline ::sp::common::KV* Metadata::_internal_add_kvs() {
  return kvs_.Add();
}
inline ::sp::common::KV* Metadata::add_kvs() {
  ::sp::common::KV* _add = _internal_add_kvs();
  // @@protoc_insertion_point(field_add:sp.common.Metadata.kvs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sp::common::KV >&
Metadata::kvs() const {
  // @@protoc_insertion_point(field_list:sp.common.Metadata.kvs)
  return kvs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace sp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sp::common::Constant_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sp::common::Constant_ErrorCode>() {
  return ::sp::common::Constant_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::sp::common::Constant_SpexHeaderFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sp::common::Constant_SpexHeaderFlag>() {
  return ::sp::common::Constant_SpexHeaderFlag_descriptor();
}
template <> struct is_proto_enum< ::sp::common::Constant_SpexHeaderFlagBitmask> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sp::common::Constant_SpexHeaderFlagBitmask>() {
  return ::sp::common::Constant_SpexHeaderFlagBitmask_descriptor();
}
template <> struct is_proto_enum< ::sp::common::Constant_SpexHeaderContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sp::common::Constant_SpexHeaderContentType>() {
  return ::sp::common::Constant_SpexHeaderContentType_descriptor();
}
template <> struct is_proto_enum< ::sp::common::InstanceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sp::common::InstanceStatus>() {
  return ::sp::common::InstanceStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_source_2fcommon_2fhttp_2fcustom_2fspex_5fcodec_2eproto
